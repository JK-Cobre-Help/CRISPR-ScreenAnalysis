configfile: "config/config.yml"

##################################################################
##                         Author Info                          ##
##################################################################

# Author: Kevin A. Boyd
# Email: kevinboyd76@gmail.com
# GitHub: https://github.com/kevinboyd76
# Date Created: August 8, 2025
# Last Modified: August 8, 2025
# Version: 1.0.0
#
# Description: 
# 
#
#
#

##################################################################
##                  Specific Steps in Pipeline                  ##
##################################################################

#  Steps:
#  1) Quality control using FastQC (per read) and MultiQC (summary report)
#  2) 
#  3) 
#  4) 
#  5) 
#
# 
#  Outputs:
#    • FastQC and MultiQC HTML reports
#    • Mageck Counts
#    • Raw, CPM, and scaled BigWig files


##################################################################
##                    Define input functions                    ##
##################################################################

import os
import pandas as pd

# read the CSV file and set an index using the values in the "sample" column.
samples_table = pd.read_csv("config/samples.csv").set_index("sample", drop=False)

# fastq filename input function definition set to Python dictionary
def fq_dict_from_sample(wildcards):
  return {
    "fq1": samples_table.loc[wildcards.sample, "fastq1"],
    "fq2": samples_table.loc[wildcards.sample, "fastq2"]
  }

# Stage FASTQs
STAGE = config["stage_fastqs"]
STAGE_DIR = "results/staged_fastqs"
os.makedirs(STAGE_DIR, exist_ok=True)

# Set single end or paired end input for Mageck Count
run_mageck_paired = config["mageck_paired"]

# Set sample labels and counts prefix and attach the directory
SAMPLE_LABELS = ",".join(samples_table["sample"].tolist())
COUNTS_DIR = "results/counts"
os.makedirs(COUNTS_DIR, exist_ok=True)
RAW_COUNTS_NAME = os.path.basename(config["counts_prefix"]).strip()
if not RAW_COUNTS_NAME:
    raise ValueError("config['counts_prefix'] is empty. Provide a short name like 'sample1'.")
COUNTS_PREFIX = os.path.join(COUNTS_DIR, RAW_COUNTS_NAME)

# functions to lookup file paths
def staged_name(sample, read):  # read: "R1" or "R2"
    return os.path.join(STAGE_DIR, f"{sample}_{read}_staged.fastq.gz")

def fq1_src(sample): return samples_table.loc[sample, "fastq1"]
def fq2_src(sample): return samples_table.loc[sample, "fastq2"]

def fq1_used(sample):
    """Path MAGeCK should read for R1 (staged if STAGE=True)."""
    return staged_name(sample, "R1") if STAGE else fq1_src(sample)

def fq2_used(sample):
    """Path MAGeCK should read for R2 (staged if STAGE=True)."""
    return staged_name(sample, "R2") if STAGE else fq2_src(sample)

def mageck_input_files():
    """
    Concrete list of files that mageck_count depends on.
    Ensures staging runs first when STAGE=True.
    """
    if run_mageck_paired:
        return [fq1_used(s) for s in samples_table.index] + \
               [fq2_used(s) for s in samples_table.index]
    else:
        return [fq1_used(s) for s in samples_table.index]

def mageck_fastq_arg_r1():
    """Space-separated list of R1 files for --fastq."""
    return " ".join(fq1_used(s) for s in samples_table.index)

def mageck_fastq_arg_r2():
    """Space-separated list of R2 files for --fastq-2."""
    return " ".join(fq2_used(s) for s in samples_table.index)

# MLE Design
MLE_ENABLED = config["mle_enabled"]

# Combine the name provided in config.yml with the file path and store all MLE outputs in this directory
RAW_MLE_NAME = os.path.basename(config["mle_prefix"]).strip()
if not RAW_MLE_NAME:
    raise ValueError("config['mle_prefix'] is empty. Provide a short name like 'CalabreseA'.")
MLE_DIR = "results/mle"
os.makedirs(MLE_DIR, exist_ok=True)
MLE_PREFIX = os.path.join(MLE_DIR, RAW_MLE_NAME)

# Custom design matrix path from config
CUSTOM_DESIGN = config["custom_design_matrix"].strip()

# Control sgRNAs (optional)
MLE_CTRL = config["mle_control_sgrna"].strip()

# If not provided write an auto-built design matrix inside results/mle/
DESIGN_TXT = CUSTOM_DESIGN if CUSTOM_DESIGN else os.path.join(MLE_DIR, "design_matrix.txt")

##################################################################
##                          Rule All                            ##
##################################################################

rule all:
    input:
        expand("results/qc/fastqc/{sample}_R1_fastqc.html", sample=samples_table.index),
        "results/qc/multiqc/multiqc_report.html",
        f"{COUNTS_PREFIX}.count.txt",
        f"{COUNTS_PREFIX}.countsummary.txt",
        *([f"{MLE_PREFIX}.gene_summary.txt"] if MLE_ENABLED else [])
        

##################################################################
##                       Quality Control                        ##
##################################################################

# run fastqc on fastq.gz files before trimming
rule fastqc_raw:
    input:
        unpack(fq_dict_from_sample)
    output:
        html1="results/qc/fastqc/{sample}_R1_fastqc.html",
        zip1="results/qc/fastqc/{sample}_R1_fastqc.zip",
        html2="results/qc/fastqc/{sample}_R2_fastqc.html",
        zip2="results/qc/fastqc/{sample}_R2_fastqc.zip"
    envmodules:
        config["fastqc"]
    log: "results/logs/fastqc_{sample}.log"
    shell:
        """
        # Run FastQC with output directed to writable folder
        fastqc -o results/qc/fastqc {input.fq1}
        fastqc -o results/qc/fastqc {input.fq2}

        # Rename output files to match specified output paths
        dir="results/qc/fastqc"
        bsename=$(basename {input.fq1} .gz)
        bsename=$(basename ${{bsename}} .fastq)
        mv ${{dir}}/${{bsename}}_fastqc.html {output.html1}
        mv ${{dir}}/${{bsename}}_fastqc.zip {output.zip1}
        
        bsename=$(basename {input.fq2} .gz)
        bsename=$(basename ${{bsename}} .fastq)
        mv ${{dir}}/${{bsename}}_fastqc.html {output.html2}
        mv ${{dir}}/${{bsename}}_fastqc.zip {output.zip2}
        """

##################################################################
##                     Multiqc on Raw Fastqs                    ##
##################################################################

rule multiqc_raw:
    input:
        expand("results/qc/fastqc/{sample}_R1_fastqc.zip", sample=samples_table.index),
        expand("results/qc/fastqc/{sample}_R2_fastqc.zip", sample=samples_table.index)
    output:
        "results/qc/multiqc/multiqc_report.html"
    params:
        outdir="results/qc/multiqc"
    envmodules:
        config["multiqc"]
    log:
        "results/logs/multiqc.log"
    shell:
        """
        multiqc results/qc/fastqc -o {params.outdir} 2> {log}
        """

##################################################################
##                         Stage FASTQs                         ##
##################################################################

if STAGE:
    rule stage_fastqs:
        input:
            unpack(fq_dict_from_sample)
        output:
            temporary_fq1=temp("results/staged_fastqs/{sample}_R1_staged.fastq.gz"),
            temporary_fq2=temp("results/staged_fastqs/{sample}_R2_staged.fastq.gz")
        log:
            "results/logs/staged_{sample}.log"
        shell:
            """
            mkdir -p results/staged_fastqs
            cp -f {input.fq1} {output.temporary_fq1}
            cp -f {input.fq2} {output.temporary_fq2}
            """

##################################################################
##                         Mageck Count                         ##
##################################################################

rule mageck_count:
    input:
        mageck_input_files()
    output:
        txt=f"{COUNTS_PREFIX}.count.txt",
        summary=f"{COUNTS_PREFIX}.countsummary.txt"
    params:
        library=config["sgRNA_library"],
        labels=SAMPLE_LABELS,
        fastq1=(lambda wc: mageck_fastq_arg_r1()),
        fastq2=(lambda wc: f"--fastq-2 {mageck_fastq_arg_r2()}" if run_mageck_paired else ""),
        outprefix=COUNTS_PREFIX
    envmodules:
        config["mageck"],
        config["apptainer"]
    log:
        "results/logs/mageck_count.log"
    shell:
        """
        # make sure directory is present and check names
        mkdir -p "$(dirname {params.outprefix})"
        echo "SingleEnd_Input: {params.fastq1}" >&2
        echo "PairedEnd_Input: {params.fastq2}" >&2
        echo "Sample_Labels: {params.labels}" >&2

        # run mageck count
        mageck count \
          -l "{params.library}" \
          --fastq {params.fastq1} \
          {params.fastq2} \
          --sample-label "{params.labels}" \
          -n "{params.outprefix}" \
          2> {log}
        """

##################################################################
##                    Build Design Matrix (auto)                ##
##################################################################

if MLE_ENABLED and not CUSTOM_DESIGN:
    rule build_design_matrix:
        input:
            config["samples_csv"]
        output:
            design = DESIGN_TXT
        log:
            "results/logs/mageck_mle_design.log"
        run:
            import pandas as _pd, os, numpy as _np
            os.makedirs(os.path.dirname(output.design), exist_ok=True)

            # load fresh (don’t rely on global df mutations)
            df = _pd.read_csv(input[0])

            # required columns
            for col in ["sample", "fastq1", "fastq2", "include_mle", "factor"]:
                if col not in df.columns:
                    raise ValueError(f"Missing column '{col}' in samples.csv")

            # normalize include_mle to boolean
            df["include_mle"] = df["include_mle"].astype(str).str.lower().isin(["true","1","t","yes","y"])

            # keep only included rows
            df = df[df["include_mle"]].copy()

            # enforce order consistent with labels (samples_table.index)
            wanted = [s for s in samples_table.index if s in set(df["sample"])]
            df = df.set_index("sample").loc[wanted].reset_index()

            # factor normalization
            def _norm_factor(x):
                x = str(x).strip()
                return "none" if x.lower() in ["none","", "na","nan","null"] else x
            df["factor"] = df["factor"].map(_norm_factor)

            # design = group + baseline + one-hot factors (excluding "none")
            mat = _pd.DataFrame({"group": df["sample"], "baseline": 1})

            # collect unique factor values (excluding "none"), keep order of first appearance
            seen = []
            for v in df["factor"]:
                if v != "none" and v not in seen:
                    seen.append(v)

            for v in seen:
                mat[v] = (df["factor"] == v).astype(int)

            # write tsv
            mat.to_csv(output.design, sep="\t", index=False)

##################################################################
##                           MAGeCK MLE                         ##
##################################################################

if MLE_ENABLED:
    rule mageck_mle:
        input:
            counts = f"{COUNTS_PREFIX}.count.txt",
            design = DESIGN_TXT
        output:
            gene_summary = f"{MLE_PREFIX}.gene_summary.txt"
        params:
            prefix = MLE_PREFIX,
            ctrl = MLE_CTRL
        envmodules:
            config["mageck"],
            config["apptainer"]
        log:
            "results/logs/mageck_mle.log"
        shell:
            """
            mkdir -p "$(dirname {params.prefix})"
            EXTRA=""
            if [ -n "{params.ctrl}" ]; then
              EXTRA="--control-sgrna {params.ctrl}"
            fi

            mageck mle \
              -k "{input.counts}" \
              -d "{input.design}" \
              -n "{params.prefix}" \
              $EXTRA \
              2> {log}
            """

##################################################################
##                  Gene & Count Summary Plots                  ##
##################################################################

rule gene_count_summary_plots:
    input:
        peak_list=expand("results/peakCalling/{sample}_0.05_peaks.narrowPeak", sample=samples_table.index),
        frip_list=expand("results/alignment/bam/{sample}_frip.txt", sample=samples_table.index),
        metadata="config/samples.csv"
    output:
        "results/plots/peak_summary_plot.png"
    params:
        out_dir="results/plots"
    envmodules:
        config["R"],
        config["bioconductor"]
    log:
        "results/logs/snakelogs/generate_peak_summary_plots.log"
    shell:
        """
        Rscript scripts/plot_peakSummary.R "{input.peak_list}" "{input.frip_list}" {input.metadata} {params.out_dir}
        """
