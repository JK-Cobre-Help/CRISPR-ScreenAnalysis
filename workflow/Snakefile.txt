configfile: "config/config.yml"

##################################################################
##                         Author Info                          ##
##################################################################

# Author: Kevin A. Boyd
# Email: kevinboyd76@gmail.com
# GitHub: https://github.com/kevinboyd76
# Date Created: August 8, 2025
# Last Modified: August 8, 2025
# Version: 1.0.0
#
# Description: 
# 
#
#
#

##################################################################
##                  Specific Steps in Pipeline                  ##
##################################################################

#  Steps:
#  1) Quality control using FastQC (per read) and MultiQC (summary report)
#  2) 
#  3) 
#  4) 
#  5) 
#
# 
#  Outputs:
#    • FastQC and MultiQC HTML reports
#    • Mageck Counts
#    • Raw, CPM, and scaled BigWig files


##################################################################
##                    Define input functions                    ##
##################################################################

import pandas as pd

# read the CSV file and set an index using the values in the "sample" column.
samples_table = pd.read_csv("config/samples.csv").set_index("sample", drop=False)

# fastq filename input function definition set to Python dictionary
def fq_dict_from_sample(wildcards):
  return {
    "fq1": samples_table.loc[wildcards.sample, "fastq1"],
    "fq2": samples_table.loc[wildcards.sample, "fastq2"]
  }

##################################################################
##                          Rule All                            ##
##################################################################

rule all:
    input:
        expand("results/qc/fastqc/{sample}_R1_fastqc.html", sample=samples_table.index),
        "results/qc/multiqc/multiqc_report.html",
        "results/counts/sample1.count.txt",
        "results/counts/sample1.countsummary.txt"

##################################################################
##                       Quality Control                        ##
##################################################################

# run fastqc on fastq.gz files before trimming
rule fastqc_reads:
    input:
        unpack(fq_dict_from_sample)
    output:
        html1="results/qc/fastqc/{sample}_R1_fastqc.html",
        zip1="results/qc/fastqc/{sample}_R1_fastqc.zip",
        html2="results/qc/fastqc/{sample}_R2_fastqc.html",
        zip2="results/qc/fastqc/{sample}_R2_fastqc.zip"
    envmodules:
        config["fastqc"]
    log: "results/logs/snakelogs/fastqc_reads.{sample}.log"
    shell:
        """
        # Run FastQC with output directed to writable folder
        fastqc -o results/qc/fastqc {input.fq1}
        fastqc -o results/qc/fastqc {input.fq2}

        # Rename output files to match specified output paths
        dir="results/qc/fastqc"
        bsename=$(basename {input.fq1} .gz)
        bsename=$(basename ${{bsename}} .fastq)
        mv ${{dir}}/${{bsename}}_fastqc.html {output.html1}
        mv ${{dir}}/${{bsename}}_fastqc.zip {output.zip1}
        
        bsename=$(basename {input.fq2} .gz)
        bsename=$(basename ${{bsename}} .fastq)
        mv ${{dir}}/${{bsename}}_fastqc.html {output.html2}
        mv ${{dir}}/${{bsename}}_fastqc.zip {output.zip2}
        """

##################################################################
##                     Multiqc on Raw Fastqs                    ##
##################################################################

rule multiqc_raw:
    input:
        expand("results/qc/fastqc/{sample}_R1_fastqc.zip", sample=samples_table.index),
        expand("results/qc/fastqc/{sample}_R2_fastqc.zip", sample=samples_table.index)
    output:
        "results/qc/multiqc/multiqc_report.html"
    params:
        outdir="results/qc/multiqc"
    envmodules:
        config["multiqc"]
    log:
        "results/logs/multiqc/multiqc.log"
    shell:
        """
        rm -rf {params.outdir}
        mkdir -p {params.outdir}
        multiqc results/qc/fastqc -o {params.outdir} 2> {log}
        """

##################################################################
##                   Mageck Count (single end)                  ##
##################################################################

rule mageck_count_se:
    input:
        unpack(fq_dict_from_sample)
    output:
        "results/counts/sample1.count.txt",
        "results/counts/sample1.countsummary.txt"
    params:
        label="sample1",
        outprefix="results/counts/sample1",
        library="config["sgRNA_library"]
    envmodules:
        config["mageck"]
    log:
        "results/logs/counts/mageck_count.log"
    shell:
        """
        mageck count \
          -l {params.library} \
          --fastq {input.fq1} \
          --sample-label {params.label} \
          -n {params.outprefix} \
          2> {log}
        """


##################################################################
##                   Mageck Count (paired end)                  ##
##################################################################

rule mageck_count_se:
    input:
        unpack(fq_dict_from_sample)
    output:
        "results/counts/sample1.count.txt",
        "results/counts/sample1.countsummary.txt"
    params:
        label="sample1",
        outprefix="results/counts/sample1",
        library="config["sgRNA_library"]
    envmodules:
        config["mageck"]
    log:
        "results/logs/counts/mageck_count.log"
    shell:
        """
        mageck count \
          -l {params.library} \
          --fastq {input.fq1} {input.fq2} \
          --sample-label {params.label} \
          -n {params.outprefix} \
          2> {log}
        """

